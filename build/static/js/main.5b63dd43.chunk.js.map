{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Ons","require","axios","a","get","process","auth","username","password","res","app_data","status","app","icon","authorizationLink","map","item","conn","data","filter","connection","connection_type","connection_name","App","useState","setConn","useEffect","getAppList","then","app_list","Page","renderToolbar","Toolbar","className","Card","List","modifier","dataSource","renderRow","row","ListItem","Icon","size","default","Button","onClick","window","open","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAIIA,EAAMC,EAAQ,IACdC,EAAQD,EAAQ,I,4CA+CpB,8BAAAE,EAAA,sEACoBD,EAAME,IAAIC,4CAAkE,CAC5FC,KAAM,CACJC,SAAUF,mBACVG,SAAUH,sBAJhB,cACQI,EADR,OAQMC,EAAW,GAEI,MAAfD,EAAIE,SAaND,EAZkB,CAChB,CACEE,IAAK,UACLC,KAAM,aACNC,kBAAmB,0DAErB,CACEF,IAAK,SACLC,KAAM,YACNC,kBAAmB,0DAGFC,KAAI,SAACC,GACxB,IAAIC,EAAOR,EAAIS,KAAKC,QAAO,SAACC,GAC1B,OAAOA,EAAWC,kBAAoBL,EAAKJ,OAU7C,OAPIK,GACFD,EAAKM,gBAAkBL,EAAK,GAAGK,gBAC/BN,EAAKL,OAAS,aAEdK,EAAKL,OAAS,eAGTK,MAnCb,kBAuCSN,GAvCT,4C,sBA2Cea,MAxFf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KAQA,OANAC,qBAAU,Y,2CACRC,GAAaC,MAAK,SAACC,GACjBJ,EAAQI,SAKV,cAAC7B,EAAI8B,KAAL,CACEC,cAAe,kBACb,qCACE,cAAC/B,EAAIgC,QAAL,UACE,qBAAKC,UAAU,SAAf,SACE,8DAGJ,cAACjC,EAAIkC,KAAL,IACA,cAAClC,EAAIkC,KAAL,UACE,cAAClC,EAAImC,KAAL,CACIC,SAAS,QACTC,WAAYpB,EACZqB,UAAW,SAACC,GAAD,OACT,mCACE,eAACvC,EAAIwC,SAAL,CAAcJ,SAAS,cAAvB,UACE,qBAAKH,UAAU,OAAf,SACE,gCACE,cAACjC,EAAIyC,KAAL,CAAUC,KAAM,CAACC,QAAQ,IAAK9B,KAAM0B,EAAI1B,OAD1C,IAC6D0B,EAAI3B,SAGnE,qBAAKqB,UAAU,QAAf,SACE,cAACjC,EAAI4C,OAAL,CAAYR,SAAS,UAAUS,QAAS,kBAAIC,OAAOC,KAAKR,EAAIzB,oBAA5D,wCC3BTkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5b63dd43.chunk.js","sourcesContent":["import 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\nimport React, { useEffect, useState } from 'react';\n\nvar Ons = require('react-onsenui');\nvar axios = require('axios');\n\nfunction App() {\n  const [conn, setConn] = useState([]);\n\n  useEffect(() => {\n    getAppList().then((app_list) => {\n      setConn(app_list);\n    })\n  })\n\n  return (\n    <Ons.Page \n      renderToolbar={() =>\n        <>\n          <Ons.Toolbar>\n            <div className=\"center\">\n              <b>My Connected Applications</b>\n            </div>\n          </Ons.Toolbar>\n          <Ons.Card/>\n          <Ons.Card>\n            <Ons.List\n                modifier=\"inset\"\n                dataSource={conn}\n                renderRow={(row) => \n                  <>\n                    <Ons.ListItem modifier=\"longdivider\">\n                      <div className=\"left\">\n                        <div>\n                          <Ons.Icon size={{default:25}} icon={row.icon}></Ons.Icon> {row.app}\n                        </div>                   \n                      </div>\n                      <div className=\"right\">\n                        <Ons.Button modifier=\"outline\" onClick={()=>window.open(row.authorizationLink)}>Connect</Ons.Button>\n                      </div>\n                    </Ons.ListItem>\n                  </>\n                }\n            ></Ons.List>\n          </Ons.Card>\n        </>\n      }\n    ></Ons.Page>\n  );\n}\n\nasync function getAppList() {\n  const res = await axios.get(process.env.REACT_APP_API_PYOAUTH_BASEURL+'/oauth/callback/apps', {\n    auth: {\n      username: process.env.REACT_APP_API_PYOAUTH_USERNAME,\n      password: process.env.REACT_APP_API_PYOAUTH_PASSWORD\n    }\n  })\n\n  var app_data = [];\n\n  if (res.status === 200) {\n    const conn_data = [\n      {\n        app: 'Twitter', \n        icon: 'fa-twitter',\n        authorizationLink: 'https://www.tes8.link/oauth/callback/twitter/authorize'\n      },\n      {\n        app: 'Google',\n        icon: 'fa-google',\n        authorizationLink: 'https://www.tes8.link/oauth/callback/google/authorize'\n      }\n    ]\n    app_data = conn_data.map((item) => {\n      var conn = res.data.filter((connection) => {\n        return connection.connection_type === item.app\n      });\n\n      if (conn) {\n        item.connection_name = conn[0].connection_name\n        item.status = \"Connected\"\n      } else {\n        item.status = \"Disconnected\"\n      }\n\n      return item;\n    });\n  }\n\n  return app_data;\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}