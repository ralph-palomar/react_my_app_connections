{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Ons","require","axios","getAppList","a","get","auth","username","process","REACT_APP_API_PYOAUTH_USERNAME","password","REACT_APP_API_PYOAUTH_PASSWORD","res","status","app_data","app","icon","authorizationLink","forEach","item","index","conn","data","filter","connection","connection_type","App","Page","renderToolbar","Toolbar","className","Card","List","modifier","dataSource","renderRow","row","ListItem","Icon","size","default","Button","onClick","window","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAIIA,EAAMC,EAAQ,IACdC,EAAQD,EAAQ,I,SA2CLE,I,2EAAf,8BAAAC,EAAA,sEACoBF,EAAMG,IAAI,4CAA6C,CACvEC,KAAM,CACJC,SAAUC,uOAAYC,+BACtBC,SAAUF,uOAAYG,kCAJ5B,UAQqB,OAPbC,EADR,QAQUC,OARV,uBASQC,EAAW,CACb,CACEC,IAAK,UACLC,KAAM,aACNC,kBAAmB,0DAErB,CACEF,IAAK,SACLC,KAAM,YACNC,kBAAmB,2DAGdC,SAAQ,SAACC,EAAMC,GACtB,IAAIC,EAAOT,EAAIU,KAAKC,QAAO,SAACC,GAC1B,OAAOA,EAAWC,kBAAoBN,EAAKJ,OAG3CI,EAAKN,OADHQ,EACY,YAEA,kBA5BtB,kBAgCWP,GAhCX,gCAmCW,IAnCX,6C,sBAwCeY,MAjFf,WACE,OACE,cAAC1B,EAAI2B,KAAL,CACEC,cAAe,kBACb,qCACE,cAAC5B,EAAI6B,QAAL,UACE,qBAAKC,UAAU,SAAf,SACE,8DAGJ,cAAC9B,EAAI+B,KAAL,IACA,cAAC/B,EAAI+B,KAAL,UACE,cAAC/B,EAAIgC,KAAL,CACIC,SAAS,QACTC,WAAY/B,EACZgC,UAAW,SAACC,GAAD,OACT,mCACE,eAACpC,EAAIqC,SAAL,CAAcJ,SAAS,cAAvB,UACE,qBAAKH,UAAU,OAAf,SACE,gCACE,cAAC9B,EAAIsC,KAAL,CAAUC,KAAM,CAACC,QAAQ,IAAKxB,KAAMoB,EAAIpB,OAD1C,IAC6DoB,EAAIrB,SAGnE,qBAAKe,UAAU,QAAf,SAEmB,iBAAfM,EAAIvB,OACF,cAACb,EAAIyC,OAAL,CAAYR,SAAS,UAAUS,QAAS,kBAAIC,OAAOC,KAAKR,EAAInB,oBAA5D,qBACA,6DCtBb4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0cd40f75.chunk.js","sourcesContent":["import 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\nimport React from 'react';\n\nvar Ons = require('react-onsenui');\nvar axios = require('axios');\n\nfunction App() {\n  return (\n    <Ons.Page \n      renderToolbar={() =>\n        <>\n          <Ons.Toolbar>\n            <div className=\"center\">\n              <b>My Connected Applications</b>\n            </div>\n          </Ons.Toolbar>\n          <Ons.Card/>\n          <Ons.Card>\n            <Ons.List\n                modifier=\"inset\"\n                dataSource={getAppList}\n                renderRow={(row) => \n                  <>\n                    <Ons.ListItem modifier=\"longdivider\">\n                      <div className=\"left\">\n                        <div>\n                          <Ons.Icon size={{default:25}} icon={row.icon}></Ons.Icon> {row.app}\n                        </div>                   \n                      </div>\n                      <div className=\"right\">\n                        {\n                          row.status === \"Disconnected\" ? \n                            <Ons.Button modifier=\"outline\" onClick={()=>window.open(row.authorizationLink)}>Connect</Ons.Button>\n                          : <b>Connected</b>\n                        }\n                      </div>\n                    </Ons.ListItem>\n                  </>\n                }\n            ></Ons.List>\n          </Ons.Card>\n        </>\n      }\n    ></Ons.Page>\n  );\n}\n\nasync function getAppList() {\n  const res = await axios.get('https://www.tes8.link/oauth/callback/apps', {\n    auth: {\n      username: process.env.REACT_APP_API_PYOAUTH_USERNAME,\n      password: process.env.REACT_APP_API_PYOAUTH_PASSWORD\n    }\n  })\n\n  if (res.status === 200) {\n    var app_data = [\n      {\n        app: 'Twitter', \n        icon: 'fa-twitter',\n        authorizationLink: 'https://www.tes8.link/oauth/callback/twitter/authorize'\n      },\n      {\n        app: 'Google',\n        icon: 'fa-google',\n        authorizationLink: 'https://www.tes8.link/oauth/callback/google/authorize'\n      }\n    ]\n    app_data.forEach((item, index) => {\n      var conn = res.data.filter((connection) => {\n        return connection.connection_type === item.app\n      });\n      if (conn) {\n        item.status = \"Connected\"\n      } else {\n        item.status = \"Disconnected\"\n      }\n    });\n\n    return app_data\n\n  } else {\n    return []\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}