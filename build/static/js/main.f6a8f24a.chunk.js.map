{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Ons","require","App","Page","renderToolbar","Toolbar","className","Card","List","modifier","dataSource","app","icon","authorizationLink","renderRow","row","ListItem","Icon","size","default","Button","onClick","window","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAIIA,EAAMC,EAAQ,IACNA,EAAQ,IAuFLC,MArFf,WACE,OACE,cAACF,EAAIG,KAAL,CACEC,cAAe,kBACb,qCACE,cAACJ,EAAIK,QAAL,UACE,qBAAKC,UAAU,SAAf,SACE,8DAGJ,cAACN,EAAIO,KAAL,IACA,cAACP,EAAIO,KAAL,UACE,cAACP,EAAIQ,KAAL,CACIC,SAAS,QACTC,WACE,CACE,CACEC,IAAK,UACLC,KAAM,aACNC,kBAAmB,0DAErB,CACEF,IAAK,SACLC,KAAM,YACNC,kBAAmB,0DAIzBC,UAAW,SAACC,GAAD,OACT,mCACE,eAACf,EAAIgB,SAAL,CAAcP,SAAS,cAAvB,UACE,qBAAKH,UAAU,OAAf,SACE,gCACE,cAACN,EAAIiB,KAAL,CAAUC,KAAM,CAACC,QAAQ,IAAKP,KAAMG,EAAIH,OAD1C,IAC6DG,EAAIJ,SAGnE,qBAAKL,UAAU,QAAf,SACE,cAACN,EAAIoB,OAAL,CAAYX,SAAS,UAAUY,QAAS,kBAAIC,OAAOC,KAAKR,EAAIF,oBAA5D,wCChCTW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f6a8f24a.chunk.js","sourcesContent":["import 'onsenui/css/onsenui.css';\nimport 'onsenui/css/onsen-css-components.css';\nimport React from 'react';\n\nvar Ons = require('react-onsenui');\nvar axios = require('axios');\n\nfunction App() {\n  return (\n    <Ons.Page \n      renderToolbar={() =>\n        <>\n          <Ons.Toolbar>\n            <div className=\"center\">\n              <b>My Connected Applications</b>\n            </div>\n          </Ons.Toolbar>\n          <Ons.Card/>\n          <Ons.Card>\n            <Ons.List\n                modifier=\"inset\"\n                dataSource={\n                  [\n                    {\n                      app: 'Twitter', \n                      icon: 'fa-twitter',\n                      authorizationLink: 'https://www.tes8.link/oauth/callback/twitter/authorize'\n                    },\n                    {\n                      app: 'Google',\n                      icon: 'fa-google',\n                      authorizationLink: 'https://www.tes8.link/oauth/callback/google/authorize'\n                    }\n                  ]\n                }\n                renderRow={(row) => \n                  <>\n                    <Ons.ListItem modifier=\"longdivider\">\n                      <div className=\"left\">\n                        <div>\n                          <Ons.Icon size={{default:25}} icon={row.icon}></Ons.Icon> {row.app}\n                        </div>                   \n                      </div>\n                      <div className=\"right\">\n                        <Ons.Button modifier=\"outline\" onClick={()=>window.open(row.authorizationLink)}>Connect</Ons.Button>\n                      </div>\n                    </Ons.ListItem>\n                  </>\n                }\n            ></Ons.List>\n          </Ons.Card>\n        </>\n      }\n    ></Ons.Page>\n  );\n}\n\nasync function getAppList() {\n  const res = await axios.get('https://www.tes8.link/oauth/callback/apps', {\n    auth: {\n      username: process.env.REACT_APP_API_PYOAUTH_USERNAME,\n      password: process.env.REACT_APP_API_PYOAUTH_PASSWORD\n    }\n  })\n\n  if (res.status === 200) {\n    const app_meta = [\n      {\n        app: 'Twitter', \n        icon: 'fa-twitter',\n        authorizationLink: 'https://www.tes8.link/oauth/callback/twitter/authorize'\n      },\n      {\n        app: 'Google',\n        icon: 'fa-google',\n        authorizationLink: 'https://www.tes8.link/oauth/callback/google/authorize'\n      }\n    ]\n    res.map((item) => {\n      const app = app_meta.filter((app_item) => {\n        return app_item.app === item.connection_type\n      });\n      return {\n  \n      }\n    });\n  } else {\n    return []\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}